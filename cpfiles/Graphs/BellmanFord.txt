public int isNegativeWeightCycle(int n, int[][] edges){
    //code here
    boolean ans=false;
    //for disconnected
    for(int i=0;i<n;i++){
        // ans|=helper(edges,n,i);
        if(helper(edges,n,i)){
            return 1;
        }
    }
    return 0;
    
    
}
public boolean helper(int[][]edges,int n,int src){
    int[]path=new int[n];
    Arrays.fill(path,Integer.MAX_VALUE);
    path[src]=0;
    for(int i=0;i<n-1;i++){
        for(int j=0;j<edges.length;j++){
            int u=edges[j][0];
            int v=edges[j][1];
            int wt=edges[j][2];
            if(path[u]==Integer.MAX_VALUE){
                continue;
            }
            if(path[u]+wt<path[v]){
                path[v]=path[u]+wt;
            }
        }
    }
        for(int j=0;j<edges.length;j++){
            int u=edges[j][0];
            int v=edges[j][1];
            int wt=edges[j][2];
            if(path[u]==Integer.MAX_VALUE){
                continue;
            }
            if(path[u]+wt<path[v]){
                return true;
            }
        }
    // if any value of path[i] is Integer.MAX_VALUE then it can't be reached from src
    return false;
}